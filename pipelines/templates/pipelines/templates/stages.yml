stages:
  - stage: CheckVariables
    displayName: "Check Variables e Contexto"
    jobs:
      - job: ShowInfo
        displayName: "Exibir variáveis principais"
        steps:
          - script: |
              echo "=== CONTEXTO DA PIPELINE ==="
              echo "Organização: $(System.CollectionUri)"
              echo "Projeto: $(System.TeamProject)"
              echo "Pipeline: $(Build.DefinitionName)"
              echo "Pipeline ID: $(System.DefinitionId)"
              echo "Execução ID: $(Build.BuildId)"
              echo "Agente (System): $(Agent.Name)"
              echo "Agente OS (System): $(Agent.OS)"
              echo "Branch: $(Build.SourceBranch)"
              echo "Branch Name: $(Build.SourceBranchName)"
              echo "Repositório: $(Build.Repository.Name)"
              echo "Repositório URL: $(Build.Repository.Uri)"
              echo "Usuário que disparou: $(Build.RequestedFor)"
              echo "-----------------------------------"
              echo "Pool definido no YAML (agent-pool): $(agent-pool)"
              echo "Nome esperado do agente (agent-pool-name): $(agent-pool-name)"
              echo "==================================="
            displayName: "Mostrar variáveis de sistema + YAML"

  - stage: agentCheckStage
    displayName: 'Check Agent Information Stage'
    jobs:
      - job: agentCheckJob
        displayName: 'Check Agent Details'
        pool:
          name: $(agent-pool)
          demands:
            - Agent.Name -equals $(agent-pool-name)
        steps:
          - script: |
              echo "Checking agent details..."
              echo "Agent Name: $(Agent.Name)"
              echo "Agent Machine Name: $(Agent.MachineName)"
              echo "Agent OS: $(Agent.OS)"
              echo "##vso[task.setvariable variable=agentName]$(Agent.Name)"
              echo "##vso[task.setvariable variable=agentOS]$(Agent.OS)"
            displayName: 'Get Agent Information'

  - stage: storageStage
    displayName: 'Check Initial Storage Stage'
    jobs:
      - job: storageJob
        displayName: 'Check Disk Space'
        pool:
          name: $(agent-pool)
          demands:
            - Agent.Name -equals $(agent-pool-name)
        steps:
          - script: |
              echo "Checking initial disk storage on the agent..."
              if [ "$(Agent.OS)" = "Linux" ]; then
                df -h | tee initial_storage.txt
                initial_usage=$(df -BM / | grep -E ' /$' | awk '{print $4}' | sed 's/M//')
              else
                powershell -command "Get-PSDrive C | Select-Object Used,Free | Format-List" | tee initial_storage.txt
                $initial_usage = powershell -command "(Get-PSDrive C).Free/1MB"
              fi
              echo "##vso[task.setvariable variable=initialStorage]$initial_usage"
            displayName: 'Check Disk Usage'

          - publish: initial_storage.txt
            artifact: storageArtifact
            displayName: 'Publish Storage Artifact'

  - stage: processesStage
    displayName: 'Check Active Processes Stage'
    dependsOn: storageStage
    jobs:
      - job: processesJob
        displayName: 'List Active Processes'
        pool:
          name: $(agent-pool)
          demands:
            - Agent.Name -equals $(agent-pool-name)
        steps:
          - script: |
              echo "Listing active processes on the agent..."
              if [ "$(Agent.OS)" = "Linux" ]; then
                ps aux
              else
                tasklist
              fi
            displayName: 'Check Active Processes'

  - stage: cleanStage
    displayName: 'Clean Stage'
    condition: succeeded('processesStage')
    jobs:
      - job: cleanJob
        displayName: 'Clean Up'
        pool:
          name: $(agent-pool)
          demands:
            - Agent.Name -equals $(agent-pool-name)
        steps:
          - script: |
              echo "Removing unnecessary packages..."
              if [ "$(Agent.OS)" = "Linux" ]; then
                sudo apt-get autoremove -y
              else
                echo "No package manager cleanup for Windows"
              fi
            displayName: 'Remove Unused Packages'

          - script: |
              echo "Cleaning temporary files..."
              if [ "$(Agent.OS)" = "Linux" ]; then
                sudo rm -rf /tmp/*
              fi
            condition: eq( variables['Agent.OS'], 'Linux' )
            displayName: 'Clean Temporary Files (Linux)'

          - powershell: |
              Write-Output "Cleaning temporary files..."
              Remove-Item -Path $env:TEMP\* -Recurse -Force
              Clear-RecycleBin -Force
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
            displayName: 'Clean Temporary Files (Windows)'

  - stage: finalStage
    displayName: 'Final Stage'
    condition: succeeded('cleanStage')
    jobs:
      - job: finalJob
        displayName: 'Final Checks and Comparison'
        pool:
          name: $(agent-pool)
          demands:
            - Agent.Name -equals $(agent-pool-name)
        steps:
          - download: current
            artifact: storageArtifact
            displayName: 'Download Storage Artifact'

          - script: |
              echo "Checking agent pool storage after cleanup..."
              if [ "$(Agent.OS)" = "Linux" ]; then
                initial_usage=$(grep -E ' /$' $(Pipeline.Workspace)/storageArtifact/initial_storage.txt | awk '{print $4}' | sed 's/M//')
                final_usage=$(df -BM / | grep -E ' /$' | awk '{print $4}' | sed 's/M//')
              else
                initial_usage=$(powershell -command "(Get-Content $(Pipeline.Workspace)/storageArtifact/initial_storage.txt | Select-String 'Free').ToString().Split(':')[1].Trim()")
                final_usage=$(powershell -command "(Get-PSDrive C).Free/1MB")
              fi

              echo "Initial available storage: ${initial_usage} MB"
              echo "Final available storage: ${final_usage} MB"

              difference=$((final_usage - initial_usage))
              echo "Storage difference after cleanup: ${difference} MB"
            displayName: 'Compare Storage Before and After Cleanup'

          - script: |
              echo "Pipeline completed!"
            displayName: 'Final Message'